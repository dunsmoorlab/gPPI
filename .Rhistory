SvmPFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta')],scr$scr)
SvmPFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta')],scr)
SvmPFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta'),],scr$scr)
SvmPFC
SvmPFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta'),],scr)
SvmPFC
group=cmap
ROI = mOFC
sdata <- data.frame(
renewal=ROI[group,'early_CSp_CSm'],
scr=ROI[group,'CSp_CSm'],
evidence=ROI[group,'ev']
)
sdata <- data.frame(
renewal=ROI[group,'early_CSp_CSm'],
scr=ROI[group,'CSp_CSm'],
evidence=ROI[group,'scr']
)
sdata <- data.frame(
renewal=ROI[group,'early_CSp_CSm'],
scr=ROI[group,'CSp_CSm'],
evidence=ROI[group,'scr']
)
SvmPFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta'),],scr,ev)
cmap = which(ev$Group == 'Control')
ev = read.csv('C:\\Users\\ACH\\Dropbox (LewPeaLab)\\STUDY\\FearCon\\graphing\\signal_change\\mvpa_ev.csv')
scr = read.csv('C:\\Users\\ACH\\Dropbox (LewPeaLab)\\STUDY\\FearCon\\graphing\\SCR\\c_e_rnw_scr.csv')
scr = rbind(scr,scr)
r_psc = read.csv('C:\\Users\\ACH\\Dropbox (LewPeaLab)\\STUDY\\FearCon\\graphing\\signal_change\\beta_values.csv')
cmap = which(ev$Group == 'Control')
pmap = which(ev$Group == 'PTSD')
amyg = cbind(r_psc[which(r_psc$roi == 'amygdala_beta'),],e_psc[which(e_psc$roi == 'amygdala_beta'),], ev)
hpc = cbind(r_psc[which(r_psc$roi == 'hippocampus_beta'),],e_psc[which(e_psc$roi == 'hippocampus_beta'),], ev)
mOFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta'),],e_psc[which(e_psc$roi == 'mOFC_beta'),], ev)
vmPFC = cbind(r_psc[which(r_psc$roi == 'vmPFC_beta'),],e_psc[which(e_psc$roi == 'vmPFC_beta'),], ev)
dACC = cbind(r_psc[which(r_psc$roi == 'dACC_beta'),],e_psc[which(e_psc$roi == 'dACC_beta'),], ev)
SvmPFC = cbind(r_psc[which(r_psc$roi == 'mOFC_beta'),],scr,ev)
SvmPFC
cmap
ROI
ROI[group,'ev']
ROI[group,'scr']
group=cmap
ROI = SvmPFC
sdata <- data.frame(
renewal=ROI[group,'early_CSp_CSm'],
scr=ROI[group,'scr'],
evidence=ROI[group,'ev']
)
sdata
med_fit <- lm(evidence ~ renewal,data=data1)
out_fit <- lm(scr ~ evidence + extinction,data=data1)
med.out <- mediate(med_fit, out_fit, treat = "extinction", mediator = "evidence", boot=TRUE, sims = 1000)
summary(med.out)
med_fit <- lm(evidence ~ renewal,data=sdata)
out_fit <- lm(scr ~ evidence + extinction,data=sdata)
med.out <- mediate(med_fit, out_fit, treat = "extinction", mediator = "evidence", boot=TRUE, sims = 1000)
med_fit <- lm(evidence ~ renewal,data=sdata)
out_fit <- lm(scr ~ evidence + extinction,data=sdata)
out_fit <- lm(scr ~ evidence + renewal,data=sdata)
med.out <- mediate(med_fit, out_fit, treat = "extinction", mediator = "evidence", boot=TRUE, sims = 1000)
med_fit <- lm(evidence ~ renewal,data=sdata)
out_fit <- lm(scr ~ evidence + renewal,data=sdata)
med.out <- mediate(med_fit, out_fit, treat = "extinction", mediator = "evidence", boot=TRUE, sims = 1000)
med.out <- mediate(med_fit, out_fit, treat = "renewal", mediator = "evidence", boot=TRUE, sims = 1000)
summary(med.out)
plot(med.out)
source('C:/Users/ACH/Dropbox (LewPeaLab)/STUDY/FearCon/CodeBase/pcorr.R', echo=TRUE)
plot(med.out)
summary(out_fit)
summary(med.out)
install.packages(c("magick", "rgl"))
lev = read.csv('../Desktop/level_df.csv')
lev.subject <- as.factor(lev$subject)
str(lev)
lev <- read.csv('../Desktop/level_df.csv')
lmod <- ezANOVA(lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi),between=.(group))
c_lev <- subset(lev, group %in% 'control')
p_lev <- subset(lev, group %in% 'ptsd')
c_lev_mod <- ezANOVA(c_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi))
p_lev_mod <- ezANOVA(p_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi))
require(ez)
lev <- read.csv('../Desktop/level_df.csv')
lmod <- ezANOVA(lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi),between=.(group))
c_lev <- subset(lev, group %in% 'control')
p_lev <- subset(lev, group %in% 'ptsd')
c_lev_mod <- ezANOVA(c_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi))
p_lev_mod <- ezANOVA(p_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi))
c_lev_mod$ANOVA
p_lev_mod$ANOVA
wmod <- ezANOVA(ws,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi),between=.(group))
ws <- read.csv('../Desktop/memory_df.csv')
wmod <- ezANOVA(ws,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi),between=.(group))
ws
wmod <- ezANOVA(ws,dv=.(rsa),wid=.(subject),within=.(encode_phase,memory_phase,roi),between=.(group))
wmod
wmod$ANOVA
lev <- read.csv('../Desktop/level_df.csv')
lmod <- ezANOVA(lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi),between=.(group))
c_lev <- subset(lev, group %in% 'control')
p_lev <- subset(lev, group %in% 'ptsd')
c_lev_mod <- ezANOVA(c_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi))
p_lev_mod <- ezANOVA(p_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,level,roi))
ws <- read.csv('../Desktop/memory_df.csv')
wmod <- ezANOVA(ws,dv=.(rsa),wid=.(subject),within=.(encode_phase,memory_phase,roi),between=.(group))
c_ws <- subset(ws, group %in% 'control')
p_ws <- subset(ws, group %in% 'ptsd')
c_ws_mod <- ezANOVA(c_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,memory_phase,roi))
p_ws_mod <- ezANOVA(c_lev,dv=.(rsa),wid=.(subject),within=.(encode_phase,memory_phase,roi))
c_ws_mod <- ezANOVA(c_ws,dv=.(rsa),wid=.(subject),within=.(encode_phase,memory_phase,roi))
p_ws_mod <- ezANOVA(p_ws,dv=.(rsa),wid=.(subject),within=.(encode_phase,memory_phase,roi))
c_ws_mod$ANOVA
p.adjust(c_ws_mod$ANOVA$p,method='BH')
p_ws_mod$ANOVA
p.adjust(p_ws_mod$ANOVA$p,method='BH')
c_lev_mod$ANOVA
p.adjust(c_lev_mod$ANOVA$p,method='BH')
p_lev_mod$ANOVA
p.adjust(p_lev_mod$ANOVA$p,method='BH')
lmod$ANOVA
p.adjust(lmod$ANOVA$p,method='BH')
wmod$ANOVA
wmod$ANOVA
p.adjust(wmod$ANOVA$p,method='BH')
getcwd()
pwd
pwd()
test <- read.csv('')
test <- read.csv('/Gus/gPPI/test.csv')
pwd
getwd()
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
require(ez)
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,ROI))
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi))
a$ANOVA
View(test)
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi))
a$ANOVA
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi),between=.(group))
test
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi),between=.(group))
a$ANOVA
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi))
a$ANOVA
test
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi))
test <- read.csv('../Dropbox (LewPeaLab)/Gus/gPPI/test.csv')
a <- ezANOVA(test,dv=.(rsa),wid=.(subject),within=.(encode_phase,roi))
a$ANOVA
rm(list = ls()
)
require(ez)
install.packages("sjstats")
require(sjstats)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("sjstats")
install.packages("sjstats",type="source")
library(devtools)
devtools::install_github("strengejacke/sjstats")
```
healthy: r = 0.46, p = 0.095
ptss:  r = 0.24, p = 0.35
```
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
data <- c(-473.5699768066406,-83.557861328125,138.0847930908203)
x <- c(1,1,1)
fixed.dum <-lm(data ~ x )
View(h)
View(fixed.dum)
summary(fixed.dum)
mean(data)
data <- c(-18.966285705566406,46.228389739990234,87.1185531616211)
mean(data)
fixed.dum <-lm(data ~ x )
summary(fixed.dum)
43.09965133666992 - 38.13
data <- c(-78.41908264160156,-5.62774658203125,-11.942834854125977)
mean(data)
fixed.dum <-lm(data ~ x )
summary(fixed.dum)
-23.54083824157715 - 38.13
-23.54083824157715 - -38.13
data - mean(data)
q <- data - mean(data)
q
fixed.dum <-lm(q ~ x )
summary(f)
summary(fixed.dum)
q = c(-46.42253,26.36881,20.05372)
fixed.dum <-lm(q ~ x )
summary(fixed.dum)
fixed.dum <-lm(data ~ x )
summary(fixed.dum)
var
err
err <- c(7640.6611328125,1453.7471923828125,3965.20703125)
fixed.dum <-lm(data ~ x + err)
summary(fixed)
summary(fixed.dum)
summary(fixed.dum)
fixed.dum <-lm(data ~ x * err)
summary(fixed.dum)
fixed.dum <-lm(data ~ x)
summary(fixed.dum)
mean(data)
dataPanel101 <- read_csv("https://github.com/ds777/sample-datasets/blob/master/dataPanel101.csv?raw=true")
library(tidyverse) # Modern data science library
library(plm)       # Panel data analysis library
library(car)       # Companion to applied regression
library(gplots)    # Various programing tools for plotting data
library(tseries)   # For timeseries analysis
library(lmtest)
dataPanel101 <- read_csv("https://github.com/ds777/sample-datasets/blob/master/dataPanel101.csv?raw=true")
dataPanel101 <- read.csv("https://github.com/ds777/sample-datasets/blob/master/dataPanel101.csv?raw=true")
dataPanel101
dataPanel101 <- plm.data(dataPanel101, index=c("country","year"))
require(tidy_verse)
require(tidyverse)
install.packages(tidyverse)
"tidyverse"
install.packages("tidyverse")
install.packages("plm")
dataPanel101 <- plm.data(dataPanel101, index=c("country","year"))
require(plm)
dataPanel101 <- plm.data(dataPanel101, index=c("country","year"))
dataPanel101
factor(dataPanel101$country)
factor(dataPanel101$country) - 1
fixed.dum <-lm(y ~ x1 + factor(country) - 1, data = dataPanel101)
\
fixed.dum <-lm(y ~ x1 + factor(country) - 1, data = dataPanel101)
)
summary(fixed.dum)
data
data.frame((data,y))
data.frame((data,x))
data.frame(c(data,x))
data.frame(c(data))
q<-data.frame(c(data))
q
q<-data.frame(data)
q
q$X <- x
x
q
fixed.dum <-lm(data ~ X + factor(X) - 1, data=q)
fixed.dum <-lm(data ~ X + X - 1, data=q)
summary(fixed.dum)
q$Sess <- c(1,2,3)
q
q$Subj <- c(1,1,1)
fixed <- lm(data ~ Subj + factor(Sess) - 1, data =q)
fixed
summary(fixed)
mean(data)
fixed <- lm(data ~ Subj + Sess, data =q)
summary(fixed)
rm(list = ls())
require(lme4)
require(lmerTest)
require(emmeans)
require(magrittr)
require(ggplot2)
require(effects)
require(interactions)
require(jtools)
require(dplyr)
require(installr)
install.packages("installr")
updateR()
require(installr)
updateR()
updateR()
rm(list = ls())
require(lmerTest)
require(emmeans)
require(magrittr)
require(ggplot2)
require(effects)
require(interactions)
require(jtools)
require(dplyr)
require(reghelper)
require(RColorBrewer)
require(dotwhisker)
afex::set_sum_contrasts()
phases <- c('baseline','acquisition','extinction')
emo_phases <- c('acquisition','extinction')
cons <- c('CS+','CS-')
groups <- c('healthy','ptsd')
group_pal <- colors()[c(565,555)]
phase_pal <- colors()[c(454,614)]
con_pal <- colors()[c(17,92)]
#setwd('/Users/ach3377/Documents/gPPI')
setwd('C:\\Users\\ACH\\Documents\\gPPI')
emm_options(lmerTest.limit = 15000)
#PFC encoding-retrieval similarity----------------------------------------------------------------------
pfc <- read.csv('pfc_ers_cleaned_lmm.csv')
#all pfc data
pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
lrtest(pfc.mod)
anova(pfc.mod)
summary(pfc.mod)
summary(anova(pfc.mod))
subcort <- read.csv('subcort_ers_cleaned_lmm.csv')
#amygdala------------------------------------------------------------------------------------
amyg <- subcort[which(subcort$roi %in% c('amyg_cem_ers','amyg_bla_ers')),]
which(lmer)
amyg.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject))
summary(amyg.mod)
amyg.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=amyg, REML=FALSE)
summary(amyg.mod)
anova(amyg.mod)
pfc.csdif <- emmeans(pfc.mod, revpairwise ~ condition|phase*roi*group)
summary(pfc.pre.csdif)
summary(pfc.csdif)
p.adjust(summary(pfc.csdif$contrasts)$p.value, method="fdr") < .05
p.adjust(summary(pfc.csdif$contrasts)$p.value, method="fdr")
pfc <- pfc %>%
mutate(phase = recode(phase,
"acquisition" = "conditioning"))
#all pfc data
pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
summary(pfc.mod)
anova(pfc.mod)
pfc.csdif <- emmeans(pfc.mod, revpairwise ~ condition|phase*roi*group)
emm_options(lmer.df="satterthwaite")
emm_options(lmerTest.limit = 15000)
pfc.csdif <- emmeans(pfc.mod, revpairwise ~ condition|phase*roi*group)
confint(pfc.csdit)
confint(pfc.csdif)
summary(pfc.csdif)
anova(pfc.mod)
pfc.emo.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="satterthwaite")
pfc.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="satterthwaite")
rm(pfc.emo.csmean)
pfc.csmean
contrast(pfc.csmean, method=list(healthy_acq_dACC - healthy_acq_vmPFC), adjust="None")
#post-hoc between roi and between group comparisons
pfc.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="satterthwaite")
#these are manual codes that set up the double subtraction we want
#position in the vectors corresponds to row in the pfc.csmean object
healthy_acq_dACC  <- c(0,0,-1,1,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,0,0)
healthy_ext_dACC  <- c(0,0,0,0,-1,1 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,0,0)
healthy_acq_vmPFC <- c(0,0,0,0,0,0 ,0,0,-1,1,0,0 ,0,0,0,0,0,0, 0,0,0,0,0,0)
healthy_ext_vmPFC <- c(0,0,0,0,0,0 ,0,0,0,0,-1,1 ,0,0,0,0,0,0, 0,0,0,0,0,0)
ptsd_acq_dACC     <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,-1,1,0,0, 0,0,0,0,0,0)
ptsd_ext_dACC     <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,-1,1, 0,0,0,0,0,0)
ptsd_acq_vmPFC    <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,-1,1,0,0)
ptsd_ext_vmPFC    <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,1,1)
contrast(pfc.csmean, method=list(healthy_acq_dACC - healthy_acq_vmPFC), adjust="None")
contrast(pfc.csmean, method=list(healthy_ext_vmPFC - healthy_ext_dACC), adjust="None")
contrast(pfc.csmean, method=list(ptsd_acq_dACC - ptsd_acq_vmPFC), adjust="None")
contrast(pfc.csmean, method=list(ptsd_ext_vmPFC - ptsd_ext_dACC), adjust="None")
contrast(pfc.csmean, method=list(healthy_acq_dACC - ptsd_acq_dACC), adjust="None")
contrast(pfc.csmean, method=list(healthy_ext_vmPFC - ptsd_ext_vmPFC), adjust="None")
ptsd_ext_vmPFC    <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,-1,1)
contrast(pfc.csmean, method=list(healthy_ext_vmPFC - ptsd_ext_vmPFC), adjust="None")
contrast(pfc.csmean, method=list(healthy_acq_dACC - healthy_acq_vmPFC,healthy_ext_vmPFC - healthy_ext_dACC), adjust="None")
group.con.list <- list(healthy_acq_dACC - healthy_acq_vmPFC,
healthy_ext_vmPFC - healthy_ext_dACC,
ptsd_acq_dACC - ptsd_acq_vmPFC,
ptsd_ext_vmPFC - ptsD_ext_dACC,
healthy_acq_dACC - ptsd_acq_dACC
healthy_ext_vmPFC - ptsd_ext_vmPFC)
group.con.list <- list(healthy_acq_dACC - healthy_acq_vmPFC,
healthy_ext_vmPFC - healthy_ext_dACC,
ptsd_acq_dACC - ptsd_acq_vmPFC,
ptsd_ext_vmPFC - ptsD_ext_dACC,
healthy_acq_dACC - ptsd_acq_dACC,
healthy_ext_vmPFC - ptsd_ext_vmPFC)
group.cons <- contrast(pfc.csmean, method=group.con.list, adjust="None")
group.con.list <- list(healthy_acq_dACC - healthy_acq_vmPFC,
healthy_ext_vmPFC - healthy_ext_dACC,
ptsd_acq_dACC - ptsd_acq_vmPFC,
ptsd_ext_vmPFC - ptsD_ext_dACC,
healthy_acq_dACC - ptsd_acq_dACC,
healthy_ext_vmPFC - ptsd_ext_vmPFC)
group.con.list <- list(healthy_acq_dACC - healthy_acq_vmPFC,
healthy_ext_vmPFC - healthy_ext_dACC,
ptsd_acq_dACC - ptsd_acq_vmPFC,
ptsd_ext_vmPFC - ptsd_ext_dACC,
healthy_acq_dACC - ptsd_acq_dACC,
healthy_ext_vmPFC - ptsd_ext_vmPFC)
group.cons <- contrast(pfc.csmean, method=group.con.list, adjust="None")
summary(group.cons)
confint(group.cons)
group.cons$p.value
summary(group.cons)
summary(group.cons)$p.value
p.adjust(summary(group.cons)$p.value, method="fdr")
#PFC encoding-retrieval similarity----------------------------------------------------------------------
pfc <- read.csv('pfc_ers_cleaned_lmm.csv')
#i do this so the phases are in order alphabetically (baseline, conditioning, extinction)
pfc <- pfc %>% mutate(phase = recode(phase, "acquisition" = "conditioning"))
#all pfc data
pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
summary(pfc.mod)
anova(pfc.mod)
contest1D(pfc.mod)
contest1D(pfc.mod, c(1,0))
contest1D(pfc.mod, c(1,0), confint=TRUE)
T
contest1D(pfc.mod, c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), confint=TRUE)
contest1D(pfc.mod, c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), confint=TRUE)
rand(pfc.mod)
ranova(pfc.mod)
summary(ranova(pfc.mod))
?ranova
anova(pfc.mod, test="Chi")
anova(pfc.mod)
group.cons
LRT
lrt
mcmcsamp
lme4
lme4::mcmcsamp
mixed
afex
require(afex)
mixed(ers ~ condition*phase*roi*group + (1|subject), data = pfc, REML=FALSE, method="LRT")
anova(pfc.mod)
#all pfc data
#pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
pfc.mod <- mixed(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE, method="LRT")
summary(pfc.mod)
pfc.mod$full_model
pfc.mod$anova_table
pfc.mod$tests
?mixed
contrast(pfc.mod)
contrasts(pfc.mod)
#all pfc data
#pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
pfc.mod <- mixed(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE, method="LRT", test_intercept=TRUE)
pfc.mod$anova_table
#planned comparisons of CS+ vs. CS-
pfc.csdif <- emmeans(pfc.mod, revpairwise ~ condition|phase*roi*group)
confint(pfc.csdif)
summary(pfc.csdif)
confint(pfc.csdif$contrasts)
summary(pfc.csdif$contrasts)
summary(pfc.csdif$contrasts)$SE
p.adjust(summary(pfc.csdif$contrasts)$p.value, method="fdr")
p.adjust(summary(pfc.csdif$contrasts)$p.value, method="fdr") <.05
#post-hoc between roi and between group comparisons
pfc.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="satterthwaite")
#these are manual codes that set up the double subtraction we want
#position in the vectors corresponds to row in the pfc.csmean object
healthy_acq_dACC  <- c(0,0,-1,1,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,0,0)
healthy_ext_dACC  <- c(0,0,0,0,-1,1 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,0,0)
healthy_acq_vmPFC <- c(0,0,0,0,0,0 ,0,0,-1,1,0,0 ,0,0,0,0,0,0, 0,0,0,0,0,0)
healthy_ext_vmPFC <- c(0,0,0,0,0,0 ,0,0,0,0,-1,1 ,0,0,0,0,0,0, 0,0,0,0,0,0)
ptsd_acq_dACC     <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,-1,1,0,0, 0,0,0,0,0,0)
ptsd_ext_dACC     <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,-1,1, 0,0,0,0,0,0)
ptsd_acq_vmPFC    <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,-1,1,0,0)
ptsd_ext_vmPFC    <- c(0,0,0,0,0,0 ,0,0,0,0,0,0 ,0,0,0,0,0,0, 0,0,0,0,-1,1)
group.con.list <- list(healthy_acq_dACC - healthy_acq_vmPFC,
healthy_ext_vmPFC - healthy_ext_dACC,
ptsd_acq_dACC - ptsd_acq_vmPFC,
ptsd_ext_vmPFC - ptsd_ext_dACC,
healthy_acq_dACC - ptsd_acq_dACC,
healthy_ext_vmPFC - ptsd_ext_vmPFC)
group.cons <- contrast(pfc.csmean, method=group.con.list, adjust="None")
confint(group.cons)
summary(group.cons)
p.adjust(summary(group.cons)$p.value, method="fdr")
emm_options(lmerTest.limit = 500)
group.cons <- contrast(pfc.csmean, method=group.con.list, adjust="None")
confint(group.cons)
summary(group.cons)
#post-hoc between roi and between group comparisons
pfc.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="satterthwaite")
group.cons <- contrast(pfc.csmean, method=group.con.list, adjust="None")
confint(group.cons)
summary(group.cons)
#post-hoc between roi and between group comparisons
pfc.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="inf")
#post-hoc between roi and between group comparisons
pfc.csmean <- emmeans(pfc.mod, ~condition*phase*roi*group, adjust='None', lmer.df="asymptotic")
#planned comparisons of CS+ vs. CS-
pfc.csdif <- emmeans(pfc.mod, revpairwise ~ condition|phase*roi*group, lmer.df="asymptotic")
confint(pfc.csdif$contrasts)
summary(pfc.csdif$contrasts)$SE
p.adjust(summary(pfc.csdif$contrasts)$p.value, method="fdr") <.05
summary(pfc.csdif$contrasts)
pfc.mod$anova_table
summary(pfc.mod)
anova(pfc.mod)
#all pfc data
#pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
pfc.mod <- mixed(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE, method="PB")#, test_intercept=TRUE)
#all pfc data
#pfc.mod <- lmer(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE)
pfc.mod <- mixed(ers ~ condition*phase*roi*group + (1|subject), data=pfc, REML=FALSE, method="LRT")#, test_intercept=TRUE)
anova(pfc.mod)
anova(pfc.mod,intercept=T)
anova(pfc.mod,intercept=TRUE)
afex::aov_4(pfc.mod)
nice(anova(pfc.mod))
anova(pfc.mod)
nice(pfc.mod$anova_table)
nice(pfc.mod$anova_table[])
nice(pfc.mod$anova_table)
